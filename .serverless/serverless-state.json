{
  "service": {
    "service": "cucumber-chrome-aws",
    "serviceObject": {
      "name": "cucumber-chrome-aws"
    },
    "provider": {
      "stage": "dev",
      "region": "us-east-1",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._'\",\\-\\/\\(\\)]+?)}",
      "name": "aws",
      "runtime": "java8",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Resource": "*",
          "Action": [
            "ses:SendEmail"
          ]
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket"
          },
          "RunCucumberLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cucumber-chrome-aws-dev-runCucumber"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "cucumber-chrome-aws",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cucumber-chrome-aws-dev-runCucumber:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cucumber-chrome-aws-dev-runCucumber:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "cucumber-chrome-aws",
                    "dev",
                    "us-east-1",
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "RunCucumberLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cucumber-chrome-aws/dev/1529100034864-2018-06-15T22:00:34.864Z/webdrivertraining-1.0-SNAPSHOT.jar"
              },
              "FunctionName": "cucumber-chrome-aws-dev-runCucumber",
              "Handler": "academy.learnprogramming.LambdaEntry::runCucumber",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "java8",
              "Timeout": 300
            },
            "DependsOn": [
              "RunCucumberLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "RunCucumberLambdaVersionH9bbypNYUbNhu2P20YKwa2PJxZMvBB3pYfALjWJRkU4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RunCucumberLambdaFunction"
              },
              "CodeSha256": "vYukfJIB1pkvZAOEyjsXVUKQqe3zu/R7qwPbmKUDFu4="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-cucumber-chrome-aws",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceRuncucumber": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "runCucumber",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRuncucumberPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {
                "method.request.header.X-Amz-Invocation-Type": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRuncucumber"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RunCucumberLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
                  "text/plain": "\"$util.escapeJavaScript($input.body).replaceAll(\"\\'\",\"'\")\""
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200,
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "$util.parseJson($input.body)"
                    }
                  },
                  {
                    "StatusCode": 400,
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "$util.parseJson($input.body)"
                    }
                  },
                  {
                    "StatusCode": 401,
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "$util.parseJson($input.body)"
                    }
                  },
                  {
                    "StatusCode": 403,
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "$util.parseJson($input.body)"
                    }
                  },
                  {
                    "StatusCode": 404,
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "$util.parseJson($input.body)"
                    }
                  },
                  {
                    "StatusCode": 422,
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "$util.parseJson($input.body)"
                    }
                  },
                  {
                    "StatusCode": 500,
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "$util.parseJson($input.body)"
                    }
                  },
                  {
                    "StatusCode": 502,
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "$util.parseJson($input.body)"
                    }
                  },
                  {
                    "StatusCode": 504,
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(^[Task timed out].*)",
                    "ResponseParameters": {
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "$util.parseJson($input.body)"
                    }
                  }
                ],
                "RequestParameters": {
                  "integration.request.header.X-Amz-Invocation-Type": "method.request.header.X-Amz-Invocation-Type"
                }
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 200
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 400
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 401
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 403
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 404
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 422
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 500
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 502
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": 504
                }
              ]
            }
          },
          "ApiGatewayDeployment1529100035173": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodRuncucumberPost"
            ]
          },
          "RunCucumberLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RunCucumberLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "apigateway.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "RunCucumberLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RunCucumberLambdaVersionH9bbypNYUbNhu2P20YKwa2PJxZMvBB3pYfALjWJRkU4"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "functions": {
      "runCucumber": {
        "handler": "academy.learnprogramming.LambdaEntry::runCucumber",
        "timeout": 300,
        "memorySize": 512,
        "events": [
          {
            "http": {
              "method": "post",
              "path": "runCucumber",
              "integration": "AWS",
              "request": {
                "parameters": {
                  "method.request.header.X-Amz-Invocation-Type": true
                },
                "template": {
                  "text/plain": "\"$util.escapeJavaScript($input.body).replaceAll(\"\\'\",\"'\")\""
                },
                "passThrough": "NEVER"
              },
              "response": {
                "headers": {
                  "Content-Type": "'application/json'"
                },
                "template": "$util.parseJson($input.body)",
                "statusCodes": {
                  "200": {
                    "pattern": ""
                  },
                  "400": {
                    "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                  },
                  "401": {
                    "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                  },
                  "403": {
                    "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                  },
                  "404": {
                    "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                  },
                  "422": {
                    "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                  },
                  "500": {
                    "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                  },
                  "502": {
                    "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                  },
                  "504": {
                    "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(^[Task timed out].*)"
                  }
                }
              }
            }
          }
        ],
        "name": "cucumber-chrome-aws-dev-runCucumber",
        "package": {},
        "vpc": {}
      }
    }
  },
  "package": {
    "artifactDirectoryName": "serverless/cucumber-chrome-aws/dev/1529100034864-2018-06-15T22:00:34.864Z",
    "artifact": "webdrivertraining-1.0-SNAPSHOT.jar"
  }
}